{{## def.setup:
  {{
    var $keyword = arguments[1]
      , $dataLvl = it.dataLevel
      , $data = 'data' + ($dataLvl||'')
      , $lvl = it.level
      , $newData = 'js_newData' + $lvl
      , $valid = 'valid' + $lvl;
  }}
#}}


{{## def.setupNextLevel:
  {{
    var $it = it.util.copy(it);
    $it.schema = it.schema[$keyword];
    $it.level++;
    $it.schemaPath = it.schemaPath + '.' + $keyword;
    $it.errSchemaPath = it.errSchemaPath + '/' + $keyword;
  }}
#}}


{{## def.replaceWithNewData:
  {{? $dataLvl }}
    {{
      var $parentData = 'data' + (($dataLvl-1)||'')
        , $dataProperty = it.dataPathArr[$dataLvl];
    }}

    {{=$data}} = {{=$parentData}}[{{=$dataProperty}}] = {{=$newData}};
  {{??}}
    data = {{=$newData}};
    if (parentData !== undefined) parentData[parentDataProperty] = {{=$newData}};
  {{?}}
#}}


{{## def.validateSubSchema:
  var js_errs{{=$lvl}} = errors;
  {{# def.setCompositeRule }}
  {{= it.validate($it) }}
  {{# def.resetCompositeRule }}
  {{=$valid}} = js_errs{{=$lvl}} == errors;
#}}


{{## def.setCompositeRule:
  {{
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
  }}
#}}


{{## def.resetCompositeRule:
  {{ it.compositeRule = $it.compositeRule = $wasComposite; }}
#}}


{{## def.beginDefOut:
  {{
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = '';
  }}
#}}


{{## def.storeDefOut:_variable:
  {{
    var _variable = out;
    out = $$outStack.pop();
  }}
#}}

